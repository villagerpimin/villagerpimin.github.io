<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://villagerpimin.github.io</id>
    <title>Pimin&apos;s Blog</title>
    <updated>2022-05-20T12:51:46.377Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://villagerpimin.github.io"/>
    <link rel="self" href="https://villagerpimin.github.io/atom.xml"/>
    <logo>https://villagerpimin.github.io/images/avatar.png</logo>
    <icon>https://villagerpimin.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Pimin&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[使用Github Pages搭建属于自己的网页]]></title>
        <id>https://villagerpimin.github.io/post/blog-class/</id>
        <link href="https://villagerpimin.github.io/post/blog-class/">
        </link>
        <updated>2020-06-23T15:00:00.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>文档转自sspai</p>
</blockquote>
<h1 id="为什么使用github-pages">为什么使用Github Pages</h1>
<p>如果你把他作为一个轻量级的个人博客服务，GitHub Pages 相较 WordPress 之类的建站服务有什么优势呢？</p>
<ul>
<li>首先他是完全免费的，相较其他的同类产品，他能替你省下一笔服务费，节约下的钱可以让你买一些其他的会员服务；</li>
<li>无须自己购买云服务进行搭建，只需按步骤一步步操作即可，即使你不懂他的技术细节；</li>
<li>支持的功能多，玩法丰富，你可以绑定你的域名、使用免费的 HTTPS、自己 DIY 网站的主题、使用他人开发好的插件等等；</li>
<li>当完成搭建后，你只需要专注于文章创作就可以了，其他诸如环境搭建、系统维护、文件存储的事情一概不用操心，都由 GitHub 处理</li>
</ul>
<p>当然了，作为一款免费的服务，我们也是要遵守 GitHub 官方使用建议和限制，在使用的时候项目和网站的大小不要超过 1GB，也不要过于频繁的更新网站的内容（每小时不超过 10 个版本），每个月的也要注意带宽使用上限为 100GB。</p>
<p>综合来看，GitHub Pages 依旧可以说是中小型博客或项目主页的最佳选项之一。</p>
<hr>
<h1 id="如何使用-github-pages">如何使用 GitHub pages</h1>
<p>下面就具体来谈谈如何使用它。</p>
<h2 id="基本页面的生成">基本页面的生成</h2>
<p>首先你需要注册一个 GitHub 账号，并在个人主界面里选择创建一个新的 Repository 。<br>
<img src="https://cdn.sspai.com/20190506142539.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="reg1" loading="lazy"><br>
进入页面后，在 Repository name 的位置填写域名，格式是 username.GitHub.io。<br>
*<em>username为GitHub中的使用者名称，不要随意更改</em> *<br>
<img src="https://www.markeditor.com/file/get/08738ebb06454701a76bda6bdaa1b8c3.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="reg2" loading="lazy"><br>
创建成功之后，点击右上角的 Settings<br>
<img src="https://cdn.sspai.com/20190506142601.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="reg3" loading="lazy"><br>
找到 GitHub Pages 选项，选择一个 GitHub 官方提供的主题<br>
<img src="https://cdn.sspai.com/20190506142607.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="reg4" loading="lazy"><br>
这里我们就随意选择一个主题 Cayman，来看看他的效果是什么样的<br>
<img src="https://cdn.sspai.com/20190506143205.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="reg5" loading="lazy"><br>
选择完毕之后 GitHub Pages 就会自动帮你生成好网站，在他跳转的界面点击 Commit changes 按钮，网站就可以访问了。<br>
<img src="https://cdn.sspai.com/20190506143333.gif?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="reg6" loading="lazy"><br>
在浏览器里输入你的项目名称，比如 brick713.GitHub.io，就可以看到，你刚刚选择的主题的个人网站的页面了。<br>
<img src="https://cdn.sspai.com/20190506143441.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="reg7" loading="lazy"><br>
到这里如果你只是想做一个例如可以随时在互联网上访问的简历，那么你只需要 GitHub Pages 项目的主页修改你 index.md 文件就可以了，比如我给出的这个模板。<br>
<img src="https://cdn.sspai.com/20190506143459.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="reg8" loading="lazy"><br>
修改完后，点击上图中左下角的 Commit Changes，然后访问你的自定义域名你就可以看到如下的样式了。<br>
<img src="https://cdn.sspai.com/20190506143603.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="reg9" loading="lazy"></p>
<p>如果你想做一个功能更丰富的博客，那我们继续往下走。</p>
<hr>
<h1 id="配置自定义域名并免费使用-https">配置自定义域名并免费使用 HTTPS</h1>
<p>在 2018 年 5 月 1 日之后，GitHub Pages 已经开始提供免费为自定义域名开启 HTTPS 的功能，并且大大简化了操作的流程，现在用户已经不再需要自己提供证书，只需要将自己的域名使用 CNAME 的方式指向自己的 GitHub Pages 域名即可。</p>
<p>首先在你的 DNS 解析里添加一条解析记录，例如我选择添加子域名 <code>blog.moyu.life</code> 通过 CNAME 的方式指向我刚刚自定义的 GitHub Pages 域名 <code>brick713.GitHub.io</code>。添加完成后等待 DNS 解析的生效（DNS 的解析记录生效到全球可能需要几分钟时间）。<br>
<img src="https://cdn.sspai.com/20190508161054.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img1" loading="lazy"></p>
<p>之后重新回到最开始进入过的 Settings 界面，找到 GitHub Pages 的设置，填写我们刚刚建立的子域名，以我自己的 blog.moyu.life 举例，点击保存。<br>
<img src="https://cdn.sspai.com/20190508161109.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img2" loading="lazy"></p>
<p>保存后 GitHub 需要一定的时间生成证书并确认域名的解析是否正常，我们只需要耐心的等待即可，成功后显示结果如下<br>
<img src="https://cdn.sspai.com/20190508161122.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img3" loading="lazy"></p>
<p>现在我们再访问 blog.moyu.life 就会发现，我们的自定义域名和 HTTPS 都生效了！可以看到证书是由著名的机构 Let's Encrypt 提供的。<br>
<img src="https://cdn.sspai.com/20190508161133.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img4" loading="lazy"></p>
<hr>
<h1 id="网站的同步">网站的同步</h1>
<p>现在我们已经有了一个基本功能健全的网站了，接下来我们需要试着对博客的内容进行管理，并且给博客添加一些更个性化的设置，官方提供两种方式：</p>
<ul>
<li>命令行方式（Mac 和 Windows 确保拥有 Git 环境）</li>
<li>桌面客户端形式（需要安装官方提供的客户端）</li>
</ul>
<p>如果你没有任何 Git 的基础，也不想进行一些繁琐的配置，那么我推荐你使用桌面客户端的形式进行管理，如果你有一定的技术基础，那么 Git 的方式则更适合你。这里我两种方法都介绍一下。</p>
<p>首先在命令行中切换到你自定义的路径下，然后 Clone 下来你的项目（操作需要在 Mac 的 Terminal 中完成，Windows 系统可以使用 Git-bash。）这里注意这里的 path 和 username 需要根据你个人情况进行替换。</p>
<p><code>cd ~/Path git clone https://GitHub.com/username/username.GitHub.io</code></p>
<figure data-type="image" tabindex="1"><img src="https://cdn.sspai.com/2019/05/09/0ac45ab544aaed52fa54338b9e84f43e.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img5" loading="lazy"></figure>
<p>接着进入你的项目的文件中，并创作一个文章。</p>
<pre><code>cd username.GitHub.io
echo &quot;Hello World 我爱这个世界&quot; &gt; index.md
</code></pre>
<p>然后按照 Git 提交内容的流程，将我们的新创作的文章上传。</p>
<pre><code>git add --all
git commit -m &quot;Firs Push&quot;
git push -u origin master
</code></pre>
<p>这里可能会碰到下面的情况：<br>
<img src="https://cdn.sspai.com/2019/05/09/e2389fe0c465bab0fdc263e96574238f.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img6" loading="lazy"></p>
<p>按照他的提示我们把注册 GitHub 的邮箱和用户名依次输入即可：</p>
<pre><code>git config user.email &quot;你的邮箱&quot;
git config user.name &quot;你的用户名&quot;
</code></pre>
<p>之后他可能会让你输入你的 GitHub 账号和密码，不用担心，正常输入即可。当我们看到这样的提升就证明提交成功了。<br>
<img src="https://cdn.sspai.com/2019/05/09/f707deafab9ed1231d20af9ed4185af2.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img7" loading="lazy"></p>
<p>可以去我们的网站主页看看是不是起了变化。<br>
<img src="https://cdn.sspai.com/20190508161225.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img8" loading="lazy"></p>
<p>如果你是使用GitHub 桌面客户端 那么就更简单了，下载安装了客户端之后，按照客户端的提示正常登陆你的 GitHub 账号。然后 Clone 下来你的 GitHub Pages 项目。</p>
<figure data-type="image" tabindex="2"><img src="https://cdn.sspai.com/20190508161237.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img9" loading="lazy"></figure>
<p>等待 Clone 完成后，界面上会显示几种管理修改你的项目的方式。<br>
<img src="https://cdn.sspai.com/20190508161341.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img10" loading="lazy"></p>
<p>这里我选择使用 Sublime Text 进行管理，把开始的 index.md 里的内容改为<code>Hello World 我也爱这个世界</code> 保存，然后在客户端上我们能看到文件的变化，我们先点击左下角的 Commit to master，再点击 Fetch origin 就可以将内容上传。<br>
<img src="https://cdn.sspai.com/20190508161353.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img11" loading="lazy"></p>
<p>然后你发现你的主页也发生了相应改变了。到这里你基本上就掌握了网站管理的基本流程和文章发布的基本流程，下面我们要开始来学会使用静态模板系统来管理博客了。</p>
<hr>
<h1 id="github-pages-的生成工具">GitHub Pages 的生成工具</h1>
<p>经历了上面的步骤，现在你的已经有了一个简单的页面了，可是他还远远未满足我们的需求，我们需要利用静态模板系统来让生产接管你博客的文章的生成，让你把更多的经历投入在创作里。下面就 GitHub 官方推荐的 Jekyll 为例子来展开讲讲。</p>
<p>因为 Jekyll 是基于 Ruby 的静态网页生成系统，因此我们首先得安装 Ruby 环境，在 Mac 下我们可以使用的 Homebrew 来进行安装。如果是其他操作系统，可以去参考 Ruby 官方安装文档进行安装。</p>
<p><code>brew install ruby</code></p>
<p>等 Ruby 安装完毕后再执行以下命令完成 Jekyll 的安装。</p>
<p><code>gem install jekyll bundler</code></p>
<p>然后进入你 Clone 下来的 GitHub Pages 项目的路径，例如：</p>
<figure data-type="image" tabindex="3"><img src="https://cdn.sspai.com/20190508161408.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="i1" loading="lazy"></figure>
<p>执行以下命令：</p>
<p><code> jekyll new . --force</code></p>
<p>完成后，Jekyll 会在你指定的目录下生成好所有文件，你可以使用 <code>bundle exec jekyll serve</code> 命令，然后就可以通过访问 <code>127.0.0.1:4000</code> 查看初始界面的样子了。</p>
<figure data-type="image" tabindex="4"><img src="https://cdn.sspai.com/20190508161423.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="i2" loading="lazy"></figure>
<p>默认的界面看起来非常的简陋也很丑，但是没关系，你可以在这些网站里根据自己的喜好找到一些美观的主题http://jekyllthemes.org/、https://jekyllthemes.io/、http://themes.jekyllrc.org/。</p>
<p>安装方法很简单，一般情况下只需要下载主题包解压后完整的，复制到你的 GitHub Pages 的项目目录里，并覆盖你之前的文件即可，有些特殊的主题要参考作者给的安装步骤，这里我随意的更换了一个主题。</p>
<figure data-type="image" tabindex="5"><img src="https://cdn.sspai.com/20190508161453.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="i3" loading="lazy"></figure>
<p>主题里的所有关键性配置都在 _config.yml 文件中，你可以根据个人的喜好和不同主题支持的功能来修改具体的内容，这里就不做展开。</p>
<p>到这里完整的搭建的流程已经结束了，你已经可以正常访问你一路配置下来的博客了，接下来你只需要找一个趁手的 Markdown 编辑器来编辑在你本地 GitHub Pages 项目中的 _posts 文件夹里的文章，并使用前面提到的两种方式将文章同步到 GitHub 上即可。需要注意的是，文章的内容和标题需要按照 Jekyll 的格式进行写作。</p>
<p>文章的文件名遵循下面的格式：</p>
<p><code>年-月-日-标题.markdown</code></p>
<p>文章内容顶部必须有下面的 YAML 头信息：</p>
<pre><code>---
layout: post
title: Blogging Like a Hacker
---
</code></pre>
<hr>
<p>最后 感谢原作者<a href="https://sspai.com/u/Brick713/updates">Brick713</a>提供的详细教程</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PC自动清理内存]]></title>
        <id>https://villagerpimin.github.io/post/pcmenory-clean/</id>
        <link href="https://villagerpimin.github.io/post/pcmenory-clean/">
        </link>
        <updated>2020-04-03T07:23:44.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>软件适合内存8g或以下的电脑</p>
</blockquote>
<h2 id="软件描述"><strong>软件描述</strong></h2>
<p>Mem Reduct是一款轻量级的内存管理程序，它可以用来监控和清理系统内存。该程序使用了未记录的内部系统功能（Native API）来清除系统缓存（系统工作集，工作集，备用页面列表，修改后的页面列表），每次清理可释放10-50％的无用缓存。软件可以设置中文。Git地址：<a href="https://github.com/henrypp/memreduct">点我进入</a></p>
<h2 id="软件下载"><strong>软件下载</strong></h2>
<p><a href="https://github.com/henrypp/memreduct/releases">Github</a> | <a href="https://github.com/henrypp/memreduct/releases/download/v.3.3.5/memreduct-3.3.5-setup.exe">直链下载(v3.3.5)</a> | <a href="https://pan.baidu.com/s/1jcjiDJ7-c5VYXdMFUtXUMw">百度云 提取码t2gb</a></p>
<h2 id="软件截图"><strong>软件截图</strong></h2>
<p><img src="https://villagerpimin.github.io/post-images/1585922860762.png" alt="" loading="lazy"><br>
<img src="https://villagerpimin.github.io/post-images/1585922865992.png" alt="" loading="lazy"></p>
<h3 id="注意为了正常工作请赋予管理员权限">注意：为了正常工作，请赋予管理员权限</h3>
]]></content>
    </entry>
</feed>